let availableTimesByDate = {
	
    '2024-03-27': ['10:00', '11:00', '12:00'],
    '2024-03-28': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
    '2024-03-29': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
    '2024-03-30': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
    '2024-03-31': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
    '2024-04-01': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
    '2024-04-02': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
    '2024-04-03': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
    '2024-04-04': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
    '2024-04-05': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
    '2024-04-06': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
    '2024-04-07': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
    '2024-04-08': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
    '2024-04-09': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
    '2024-04-10': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
    '2024-04-11': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
    '2024-04-12': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
    '2024-04-13': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
    '2024-04-14': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
    '2024-04-15': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
    '2024-04-16': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
    '2024-04-17': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
    '2024-04-18': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
    '2024-04-19': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
    '2024-04-20': ["17:00", "18:00","19:00","20:00","21:00","22:00"],
  };


  const fetchAPI = (date) => {
    return new Promise((resolve, reject) => {
        setTimeout(() =>{
            if(availableTimesByDate[date]){
                resolve(availableTimesByDate[date])
            }
            else{
                reject(new Error('No available times for the selected date.'));
            }
        } , 1000)
    })
  }

  const submitAPI = (formData) => {
    availableTimesByDate[formData.date] = availableTimesByDate[formData.date].filter(time => time !== formData.time);
	console.log(formData.date, availableTimesByDate)
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        if (formData) {
          resolve(true); // Simulate successful submission
        } else {
          reject(new Error('Form submission failed.'));
        }
      }, 1000); // Simulate API delay
    });
  };

  export{fetchAPI,submitAPI}